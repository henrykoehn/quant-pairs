@page "/"
@inject QuantDashboard.Services.BacktestExecute BacktestExecute

<PageTitle>Quant Dashboard</PageTitle>

<h3>Quant Pairs Backtester</h3>

<EditForm Model="this" OnValidSubmit="RunBacktest">
    <div class="mt-4">
        <label for="ticker1">First Ticker:</label>
        <InputText id="ticker1"
                   class="form-control"
                   placeholder="e.g. WMT"
                   @bind-Value="Ticker1" />

        <label for="ticker2" class="mt-3">Second Ticker:</label>
        <InputText id="ticker2"
                   class="form-control"
                   placeholder="e.g. COST"
                   @bind-Value="Ticker2" />

        <button type="submit"
                class="btn btn-primary mt-4">
            Run Backtest
        </button>
    </div>
</EditForm>

@if (!string.IsNullOrEmpty(ResultMessage))
{
    <div class="alert alert-info mt-4">
        @ResultMessage
    </div>
}

@if (!string.IsNullOrEmpty(PlotImageUrl))
{
    <div class="mt-4">
        <h4>Strategy Performance</h4>
        <img src="@PlotImageUrl" 
             alt="Strategy Performance" 
             class="img-fluid" />
        <p class="text-muted mt-2">
            Below is your strategy’s cumulative P&L over time,
            with green ▲ for long entries and red ▼ for short entries.
        </p>
    </div>
}

@code {
    // bound by the EditForm
    public string Ticker1 { get; set; } = string.Empty;
    public string Ticker2 { get; set; } = string.Empty;

    private string? ResultMessage;
    private string? PlotImageUrl;

    private async Task RunBacktest()
    {
        // show spinner/text
        ResultMessage = "Running backtest…";
        PlotImageUrl  = null;
        StateHasChanged();

        // run the backtest
        var output = await BacktestExecute.RunAsync(Ticker1, Ticker2);
        ResultMessage = output;

        // update the plot URL (cache‐busted each run)
        PlotImageUrl = $"images/strategy_performance.png?{DateTime.UtcNow.Ticks}";
    }
}
