@page "/"
@inject QuantDashboard.Services.BacktestExecute BacktestExecute

<PageTitle>Quant Dashboard</PageTitle>

<h3 class="mt-4">Quant Pairs Backtester</h3>

<div class="mt-4">
    <label for="ticker1">First Ticker:</label>
    <InputText id="ticker1"
               @bind-value="Ticker1"
               class="form-control"
               placeholder="e.g. WMT" />

    <label for="ticker2" class="mt-3">Second Ticker:</label>
    <InputText id="ticker2"
               @bind-value="Ticker2"
               class="form-control"
               placeholder="e.g. COST" />

    <button class="btn btn-primary mt-4"
            @onclick="RunBacktest"
            disabled="@IsRunning">
        @(IsRunning ? "Running…" : "Run Backtest")
    </button>
</div>

@if (!string.IsNullOrEmpty(ResultMessage))
{
    <div class="alert alert-info mt-4">
        @ResultMessage
    </div>
}

@if (ShowImage)
{
    <div class="mt-4">
        <h5>Strategy Performance</h5>
        <figure>
            <img src="images/strategy_performance.png?@ImageVersion"
                 class="img-fluid rounded border"
                 style="max-width:100%;"
                 alt="Cumulative P&L plot" />
            <figcaption class="text-muted mt-2">
                This chart shows the strategy’s cumulative P&L over time for the two selected tickers.
                ▲ green markers indicate when the strategy enters a long position,
                ▼ red markers when it enters a short position.
            </figcaption>
        </figure>
    </div>
}

@code {
    private string Ticker1 = "";
    private string Ticker2 = "";
    private string? ResultMessage;
    private bool IsRunning = false;
    private bool ShowImage = false;
    private string ImageVersion = DateTime.Now.Ticks.ToString();

    private async Task RunBacktest()
    {
        if (string.IsNullOrWhiteSpace(Ticker1) ||
            string.IsNullOrWhiteSpace(Ticker2))
        {
            ResultMessage = "Please enter two tickers.";
            return;
        }

        IsRunning = true;
        ShowImage = false;
        ResultMessage = "Running backtest…";

        try
        {
            // Executes scraper, C++ backtester, then plotter.py
            ResultMessage = await BacktestExecute.RunAsync(Ticker1, Ticker2);

            // Once done, display the new plot
            ImageVersion = DateTime.Now.Ticks.ToString();
            ShowImage = true;
        }
        catch (Exception ex)
        {
            ResultMessage = $"UI Error: {ex.Message}";
            ShowImage = false;
        }
        finally
        {
            IsRunning = false;
        }
    }
}
